val graph = spark.dseGraph("twittergraph")

val df = sqlContext.sql("select distinct user_id as _id,user_id as userid,user_id as theuserid,location, '' as tweetid,'' as tagword,'' as sentenceline,'' as countryname from cassandratweet.tweets_by_sentence").withColumn("~label", lit("user")).where("_id != 'null'")
graph.updateVertices(df)

val dfc = sqlContext.sql("""select distinct explode(split(mentions, ' ')) as _id,'' as location, '' as tweetid,'' as tagword,'' as sentenceline,'' as countryname from cassandratweet.tweets_by_sentence where mentions != ''""").withColumn("userid", $"_id").withColumn("theuserid", $"_id").withColumn("~label", lit("user")).where("_id != 'null'")
graph.updateVertices(dfc)

val dfd = sqlContext.sql("""select distinct reply_to as _id,'' as location, '' as tweetid,'' as tagword,'' as sentenceline,'' as countryname from cassandratweet.tweets_by_sentence where reply_to != ''""").withColumn("userid", $"_id").withColumn("theuserid", $"_id").withColumn("~label", lit("user")).where("_id != 'null'")
graph.updateVertices(dfd)

val dfx = sqlContext.sql("select distinct tweet_id as _id,tweet_id as tweetid,tweet_id as thetweetid,sentence_line as sentenceline,sentence_line as thesentenceline,sentence,sentiment,'' as tagword,'' as countryname,'' as userid from cassandratweet.tweets_by_sentence").withColumn("~label", lit("sentence"))
graph.updateVertices(dfx)

val dfxx = sqlContext.sql("select distinct tweet_id as _id,tweet_id as tweetid,tweet_id as thetweetid,datetime as createdtime, '' as sentenceline,'' as tagword,'' as countryname,'' as userid from cassandratweet.tweets_by_sentence").withColumn("~label", lit("tweet"))
graph.updateVertices(dfxx)

val dft = sqlContext.sql("select distinct tag as _id, tag as tagword, tag as thetagword from cassandratweet.tag_sentiment").withColumn("~label", lit("tag"))
graph.updateVertices(dft)

val df1 = sqlContext.sql("select distinct user_id,tweet_id, '' as _id, '' as sentiment from cassandratweet.tweets_by_sentence").withColumn("~label", lit("tweeted"))
val tweeted = df1.select (graph.idColumn(lit("user"), $"user_id") as "src", graph.idColumn(lit("tweet"), $"tweet_id") as "dst",  $"~label")
graph.updateEdges(tweeted)

val df2 = sqlContext.sql("""select distinct tweet_id, reply_to, '' as _id, '' as sentiment from cassandratweet.tweets_by_sentence where reply_to !='' """).withColumn("~label", lit("repliedto")).where("reply_to != 'null'")
val repliedto = df2.select (graph.idColumn(lit("tweet"), $"tweet_id") as "src", graph.idColumn(lit("user"), $"reply_to") as "dst",  $"~label")
graph.updateEdges(repliedto)

val df3 = sqlContext.sql("""select distinct tweet_id,explode(split(mentions, ' ')) as mentions from cassandratweet.tweets_by_sentence where mentions != ''""").withColumn("~label", lit("mentions")).where("mentions != 'null'")
val mentions = df3.select (graph.idColumn(lit("tweet"), $"tweet_id") as "src", graph.idColumn(lit("user"), $"mentions") as "dst",  $"~label")
graph.updateEdges(mentions)

val df4 = sqlContext.sql("""select distinct tweetid,sentence_line,sentiment from cassandratweet.tag_sentiment""").withColumn("~label", lit("containssentence"))
val containssentence = df4.select (graph.idColumn(lit("tweet"), $"tweetid") as "src", graph.idColumn(lit("sentence"), $"tweetid",$"sentence_line") as "dst", $"sentiment", $"~label")
graph.updateEdges(containssentence)

val df5 = sqlContext.sql("""select distinct tweetid,sentence_line,tag,sentiment from cassandratweet.tag_sentiment""").withColumn("~label", lit("containstag"))
val contains = df5.select (graph.idColumn(lit("sentence"), $"tweetid",$"sentence_line") as "src", graph.idColumn(lit("tag"), $"tag") as "dst", $"sentiment", $"~label")
graph.updateEdges(contains)
